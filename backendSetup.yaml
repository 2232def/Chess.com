# SERVER JS CODE

- Import: express, http, socket.io, chess.js

- Create Express app instance
- Initialize HTTP server with Express
- Instantiate Socket.io on HTTP server

- Create Chess object instance (chess.js)

- Initialize:
    - Players object: track socket IDs, roles (white/black)
    - CurrentPlayer: track current turn

- Configure Express app:
    - Use EJS templating engine
    - Serve static files from 'public' directory

- Define route for root URL
- Render EJS template "index"
- Title: "Custom Chess Game"

- Socket.io handles connection event
- Callback executed on client connect
- Server assigns role based on availability:
    - If slots empty:
        - Assign role (white/black)
        - Inform player
    - If slots full:
        - Designate as spectator

- Client connection:
    - Assign role based on game state:
        - If no white player, assign white role
        - If no black player, assign black role
        - Emit "playerRole" event with assigned role
        - If both slots filled, designate as spectator
        - Emit "spectatorRole" event
    - Send initial board state using FEN notation

- Client disconnection:
    - Remove assigned role from players object

- Listen for "move" events:
    - Validate correct player's turn
    - If valid:
        - Update game state
        - Broadcast move via "move" event
        - Send updated board state via "boardState" event
    - If invalid:
        - Log error message

############################################################################################################################## task
- winner event:
    - Check for checkmate or stalemate
    - If game over:
        - Emit "gameOver" event with winner information
        - Reset game state for new game
    - If not over:
        - Emit "gameState" event with current game state
        - Update player turns accordingly
- Handle "reset" event:
    - Reset game state
    - Notify all players of reset
    - Emit "reset" event to all clients
- Handle "checkmate" event:
    - Emit "checkmate" event with winner information
    - Reset game state for new game
- Handle "draw" event:
    - Emit "draw" event to all clients
    - Reset game state for new game
- Handle "spectator" event:
    - Allow spectators to join
    - Emit "spectator" event with current game state
- Handle timer events:
    - Implement countdown timer for each player
    - Emit "timer" event with remaining time
    - Handle timeouts and end game if time runs out
- Handle timer:
    - Implement countdown timer for each player
    - Emit "timer" event with remaining time
    - Handle timeouts and end game if time runs out
    
##############################################################################################################################

- Ensure smooth gameplay and real-time updates for all connected clients.


- User Authentication:
    - Implement user authentication using Clerk.
    - Ensure players can sign up and log in to play the game.
    - Store user information securely and manage sessions.


- Some bugs to solve:
    - Players should not be able to move pieces untill and unless opponent player connects.