<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
  <title>Chess.com</title>
  <script src="https://unpkg.com/@tailwindcss/browser@4"></script>
  <style>
    body {
      background: url('../assets/mandala.png') center center / cover repeat;
      overflow-x: hidden;
      overflow-y: auto;
      font-family: 'Arial', sans-serif;
      margin: 0;
      padding: 0;
    }

    /* body::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background:
        radial-gradient(circle at 20% 50%, rgba(120, 119, 198, 0.1) 0%, transparent 50%),
        radial-gradient(circle at 80% 50%, rgba(255, 110, 199, 0.1) 0%, transparent 50%),
        radial-gradient(circle at 40% 20%, rgba(120, 219, 226, 0.1) 0%, transparent 50%);
      pointer-events: none;
    } */

    .chessboard {
      display: grid;
      grid-template-columns: repeat(8, minmax(0, 1fr));
      grid-template-rows: repeat(8, minmax(0, 1fr));
      width: 600px;
      height: 600px;
      transform: rotate(0deg);
      position: relative;
      border-radius: 8px;
      overflow: hidden;
      background: #D9B88F;

      /* Main border with glow */
      border: 4px solid #d4af37;
      box-shadow:
        0 0 20px rgba(212, 175, 55, 0.6),
        0 0 40px rgba(212, 175, 55, 0.4),
        0 0 60px rgba(212, 175, 55, 0.2),
        inset 0 0 20px rgba(212, 175, 55, 0.1);

      /* Spike decorations */
    }

    .chessboard::before,
    .chessboard::after {
      content: '';
      position: absolute;
      z-index: -1;
    }

    /* Corner spikes using pseudo-elements and CSS shapes */
    .chessboard::before {
      top: -8px;
      left: -8px;
      right: -8px;
      bottom: -8px;
      background:
        /* Top-left spike */
        conic-gradient(from 225deg at 0% 0%, transparent 0deg, #d4af37 10deg, transparent 20deg),
        /* Top-right spike */
        conic-gradient(from 315deg at 100% 0%, transparent 0deg, #d4af37 10deg, transparent 20deg),
        /* Bottom-left spike */
        conic-gradient(from 135deg at 0% 100%, transparent 0deg, #d4af37 10deg, transparent 20deg),
        /* Bottom-right spike */
        conic-gradient(from 45deg at 100% 100%, transparent 0deg, #d4af37 10deg, transparent 20deg);
      filter: drop-shadow(0 0 10px rgba(212, 175, 55, 0.8));
    }

    /* Additional decorative border */
    .chessboard::after {
      top: -12px;
      left: -12px;
      right: -12px;
      bottom: -12px;
      border: 2px solid rgba(212, 175, 55, 0.3);
      border-radius: 12px;
      background:
        /* Corner ornaments */
        radial-gradient(circle at 0% 0%, #d4af37 2px, transparent 3px),
        radial-gradient(circle at 100% 0%, #d4af37 2px, transparent 3px),
        radial-gradient(circle at 0% 100%, #d4af37 2px, transparent 3px),
        radial-gradient(circle at 100% 100%, #d4af37 2px, transparent 3px),
        /* Side ornaments */
        radial-gradient(circle at 50% 0%, #d4af37 1px, transparent 2px),
        radial-gradient(circle at 50% 100%, #d4af37 1px, transparent 2px),
        radial-gradient(circle at 0% 50%, #d4af37 1px, transparent 2px),
        radial-gradient(circle at 100% 50%, #d4af37 1px, transparent 2px);
    }

    /* Enhanced square styles */
    .square {
      display: flex;
      align-items: center;
      justify-content: center;
      position: relative;
      transition: all 0.3s ease;
    }

    .square.light {
      background: #D9B88F;
    }

    .square.dark {
      background: #A7332B;
    }

    .square:hover {
      box-shadow: inset 0 0 20px rgba(212, 175, 55, 0.3);
    }

    /* Enhanced piece styles */
    .piece {
      font-size: 60px;
      cursor: pointer;
      transition: all 0.3s ease;
      filter: drop-shadow(2px 2px 4px rgba(0, 0, 0, 0.5));
    }

    .piece.white {
      color: #ffffff;
      text-shadow: 0 0 10px rgba(255, 255, 255, 0.8);
    }

    .piece:hover {
      transform: scale(1.1);
      filter: drop-shadow(0 0 15px rgba(212, 175, 55, 0.8));
    }

    .piece.draggable {
      cursor: grab;
    }

    .dragging {
      opacity: 0.7;
      transform: scale(1.2);
      z-index: 1000;
    }

    .flipped {
      transform: rotate(180deg);
    }

    .flipped .piece {
      transform: rotate(180deg);
    }

    /* Enhanced Timer Styles */
    .timer1,
    .timer2 {
      position: fixed !important;
      right: 16px;
      left: auto;
      transform: none;
      background: linear-gradient(135deg, #1a1a2e, #16213e, #0f3460);
      color: #d4af37;
      font-weight: bold;
      font-family: 'Courier New', monospace;
      text-align: center;
      border-radius: 12px;
      border: 3px solid #d4af37;
      box-shadow:
        0 0 20px rgba(212, 175, 55, 0.5),
        0 8px 16px rgba(0, 0, 0, 0.3),
        inset 0 0 20px rgba(212, 175, 55, 0.1);
      z-index: 1000;
      min-width: 140px;
      padding: 12px 20px;
      font-size: 1rem;
      text-shadow: 0 0 10px rgba(212, 175, 55, 0.8);

    }

    /* Timer corner spikes */
    /* .timer1::before,
    .timer2::before {
      content: '';
      position: absolute;
      top: -6px;
      left: -6px;
      right: -6px;
      bottom: -6px;
      background:
        conic-gradient(from 225deg at 0% 0%, transparent 0deg, #d4af37 5deg, transparent 10deg),
        conic-gradient(from 315deg at 100% 0%, transparent 0deg, #d4af37 5deg, transparent 10deg),
        conic-gradient(from 135deg at 0% 100%, transparent 0deg, #d4af37 5deg, transparent 10deg),
        conic-gradient(from 45deg at 100% 100%, transparent 0deg, #d4af37 5deg, transparent 10deg);
      border-radius: 15px;
      z-index: -1;
    } */

    .timer1 {
      top: 16px;
    }

    .timer2 {
      bottom: 16px;
    }

    .timers {
      display: flex;
      gap: 20px;
      margin: 10px;
      font-family: monospace;
    }

    .timer-box {
      padding: 6px 12px;
      background: #222;
      color: #fff;
      border-radius: 4px;
    }

    .active {
      outline: 2px solid #4caf50;
    }

    /* Enhanced player info styles */
    .player-info {
      transition: all 0.3s ease;
      background: rgba(26, 26, 46, 0.8);
      border-radius: 12px;
      border: 2px solid rgba(212, 175, 55, 0.3);
      padding: 8px 10px;
      backdrop-filter: blur(10px);
    }

    .player-info:hover {
      border-color: rgba(212, 175, 55, 0.6);
      box-shadow: 0 0 20px rgba(212, 175, 55, 0.3);
    }

    /* Enhanced avatar styles */
    .player-info .square {
      border: 3px solid #d4af37;
      box-shadow:
        0 0 15px rgba(212, 175, 55, 0.5),
        inset 0 0 10px rgba(212, 175, 55, 0.2);
      background: linear-gradient(135deg, #ffffff, #f0f0f0);
    }

    .square-hover-legal {
      background-color: rgba(0, 255, 0, 0.4) !important;
      box-shadow: inset 0 0 15px rgba(0, 255, 0, 0.6) !important;
      border: 2px solid rgba(0, 255, 0, 0.8) !important;
    }

    .square-hover-illegal {
      background-color: rgba(255, 0, 0, 0.4) !important;
      box-shadow: inset 0 0 15px rgba(255, 0, 0, 0.6) !important;
      border: 2px solid rgba(255, 0, 0, 0.8) !important;
    }

    /* Smooth transitions for hover effects */
    .square {
      transition: all 0.2s ease;
    }




    /* Responsive Design */
    @media (max-width: 768px) {
      .chessboard {
        width: 320px;
        height: 320px;
      }

      .timer1,
      .timer2 {
        font-size: 1.1rem;
        min-width: 120px;
        padding: 10px 16px;
      }

      .player1,
      .player2 {
        width: 320px !important;
      }

      .piece {
        font-size: 26px;
      }
    }

    @media (max-width: 480px) {
      .chessboard {
        width: 280px;
        height: 280px;
      }

      .timer1,
      .timer2 {
        font-size: 1rem;
        min-width: 100px;
        padding: 8px 12px;
      }

      .player1,
      .player2 {
        width: 280px !important;
        gap: 8px !important;
      }

      .piece {
        font-size: 22px;
      }
    }

    /* Game container enhancements */
    .game-container {
      min-height: 100vh;
      padding: 20px;
      position: relative;
    }

    @media (max-height: 600px) {
      .game-container {
        gap: 12px !important;
        padding: 10px;
      }

      .timer1 {
        top: 15px;
      }

      .timer2 {
        bottom: 15px;
      }
    }

    /* Enhanced button styles */
    #copyLinkBtn {
      background: linear-gradient(135deg, #3b82f6, #1e40af);
      border: 2px solid rgba(212, 175, 55, 0.5);
      box-shadow:
        0 0 15px rgba(59, 130, 246, 0.3),
        0 4px 8px rgba(0, 0, 0, 0.3);
      text-shadow: 0 0 5px rgba(255, 255, 255, 0.5);
    }

    #copyLinkBtn:hover {
      transform: translateY(-2px);
      box-shadow:
        0 0 25px rgba(59, 130, 246, 0.5),
        0 8px 16px rgba(0, 0, 0, 0.3);
    }
  </style>
</head>

<body>

  <div class="game-container w-[100vw] h-[100vh] relative overflow-hidden ">
    <div class="players h-[100vh] flex  flex-col  justify-between absolute left-0 top-0 space-y-[32rem] ">

      <div class="player1 h-[8vh] w-[300px] top-[0%] relative flex items-center gap-2 player-info">
        <div class="square h-[2rem] w-[2rem] rounded-full border-2 flex border-green-500 bg-white">
          <div id="opponentAvatar1" class="h-full w-full flex items-center justify-center font-bold text-black">?</div>
        </div>
        <div class="text-white flex-1">
          <p class="font-bold text-md" id="opponentName1">John Cena</p>
          <p class="text-sm text-gray-400" id="opponentRole1">Black</p>
        </div>
        <div class="text-right text-white">
          <p class="text-sm text-gray-400">Bot</p>
        </div>
      </div>

      <div class="player2 h-[8vh] w-[300px] relative flex items-center gap-2 player-info">
        <div class="square h-[2rem] w-[2rem] rounded-full border-2 flex border-green-500 bg-white">
          <% if (user) { %>
            <div class="h-full w-full flex items-center justify-center font-bold text-black">
              <%= user.firstName.charAt(0).toUpperCase() %>
            </div>
            <% } else { %>
              <div class="h-full w-full flex items-center justify-center font-bold text-black">G</div>
              <% } %>
        </div>

        <div class="text-white flex-1">
          <% if (user) { %>
            <p class="font-bold text-md">
              <%= user.firstName %>
                <%= user.lastName || '' %>
            </p>
            <p class="text-sm text-gray-400" id="userRole">-</p>
            <% } else { %>
              <p class="font-bold text-lg">Guest Player</p>
              <p class="text-sm text-gray-400" id="userRole">-</p>
              <% } %>
        </div>

        <div class="text-right text-white">
          <p class="text-sm text-gray-400">You</p>
        </div>
      </div>
    </div>


    <div class="absolute top-[50%] left-[50%] translate-x-[-50%] translate-y-[-50%]">
      <!-- Opponent (Player 1) -->

      <!-- Chess Board -->
      <!-- <div class="timers">
        <div id="timer-w" class="timer-box">White: 05:00</div>
        <div id="timer-b" class="timer-box">Black: 05:00</div>
      </div> -->
      <div class="chessboard bg-red-800 "></div>

      <!-- Current Player (Player 2) -->


      <!-- Copy Link Button -->

    </div>
  </div>


  <script src="https://cdn.socket.io/4.7.5/socket.io.min.js"
    integrity="sha384-2huaZvOR9iDzHqslqwpR87isEmrfxqyWOF7hr7BY6KG0+hVKLoEXMPUJw3ynWuhO"
    crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/chess.js/0.10.3/chess.min.js"
    integrity="sha512-xRllwz2gdZciIB+AkEbeq+gVhX8VB8XsfqeFbUh+SzHlN96dEduwtTuVuc2u9EROlmW9+yhRlxjif66ORpsgVA=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>
  <!-- <script src="ejs.js"></script> -->

  <script id="server-user"
    type="application/json"><%- JSON.stringify(typeof user !== 'undefined' ? user : null) %></script>


  <script>
    const userEl = document.getElementById('server-user');
    window.currentUser = userEl ? JSON.parse(userEl.textContent || 'null') : null;

    // const urlParts = window.location.pathname.split('/');
    // const roomId = urlParts.length > 2 ? urlParts[2] : null;

    const roomId = '<%= roomId%>';
    const assignedColor = '<%= assignedColor %>';

    window.socket = io({
      query: {
        roomId: roomId,
        userId: (window.currentUser && window.currentUser.id) ? window.currentUser.id : '',
        userName: window.currentUser ?
          (window.currentUser.firstName + ' ' + (window.currentUser.lastName || '')).trim() : 'Guest',
        email: (window.currentUser && window.currentUser.email) ? window.currentUser.email : '',
        preferredColor: assignedColor || ""
      }

    })

  </script>
  <script>
    window.IS_COMPUTER_MODE = true;
    // window.ENGINE_DEPTH = 12;
  </script>

  <script src="/js/stockfish-service.js"></script>
  <script src="/js/chessgame.js"></script>
  <script src="/js/timer.js"></script>
  <script src="/js/computer-mode.js"></script>
  <script src="/js/computer_mode_alerts.js"></script>

  <script>
    stockfishService.setComputerColor('black');
    stockfishService.setComputerLevel(1);
    if (typeof createComputerMode === 'function') createComputerMode();

    function format(sec) {
      const m = String(Math.floor(sec / 60)).padStart(2, '0');
      const s = String(sec % 60).padStart(2, '0');
      return `${m}:${s}`;
    }

    document.addEventListener('timer:timerUpdate', e => {
      const t = e.detail;
      const wEl = document.querySelector('.timer2');
      const bEl = document.querySelector('.timer1');
      if (wEl) wEl.textContent = `White: ${format(t.w)}`;
      if (bEl) bEl.textContent = `Black: ${format(t.b)}`;
    });

    document.addEventListener('board:fen', e => {
      const turn = e.detail.fen.split(' ')[1];
      const wEl = document.querySelector('.timer2');
      const bEl = document.querySelector('.timer1');
      if (wEl && bEl) {
        wEl.classList.toggle('active', turn === 'w');
        bEl.classList.toggle('active', turn === 'b');
      }
    });

    document.addEventListener('timer:gameOver', e => {
      alert(e.detail);
    });
  </script>
  <script async crossorigin="anonymous" data-clerk-publishable-key="<%= process.env.CLERK_PUBLISHABLE_KEY %>"
    src="https://cdn.jsdelivr.net/npm/@clerk/clerk-js@latest/dist/clerk.browser.js" type="text/javascript"></script>
  <script src="/js/userbutton.js"></script>

</body>

</html>